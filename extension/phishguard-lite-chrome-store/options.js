import{g as m}from"./config.js";const u=m();let n=null,l=null,a=null,r=null,i=null,o=null,t=null;function g(e,s=!0){if(console.log("setStatus called with:",e,"ok:",s),console.log("statusDiv element:",t),!t){console.error("statusDiv is null - cannot display status message");return}console.log("Setting status div content and styles"),t.textContent=e,t.className=`status ${s?"success":"error"}`,t.style.display="block",console.log("Status div updated:",{textContent:t.textContent,className:t.className,display:t.style.display}),setTimeout(()=>{t&&(t.style.display="none",console.log("Status message auto-hidden"))},5e3)}async function v(){console.log("Loading PhishGuard settings...");try{let e=await chrome.storage.sync.get(["enabled","minScore","apiBase","tenantKey","enableReporting"]);(chrome.runtime.lastError||Object.keys(e).length===0)&&(console.log("Sync storage failed, trying local storage fallback..."),e=await chrome.storage.local.get(["enabled","minScore","apiBase","tenantKey","enableReporting"])),console.log("Settings loaded:",e),n&&(n.checked=e.enabled!==void 0?e.enabled:!0),l&&(l.value=e.minScore!==void 0?e.minScore.toString():"20"),a&&(a.value=e.apiBase||u),r&&(r.value=e.tenantKey||""),i&&(i.checked=e.enableReporting!==void 0?e.enableReporting:!0),console.log("Settings applied to UI");const s={enabled:(n==null?void 0:n.checked)??!0,minScore:parseInt((l==null?void 0:l.value)??"20"),apiBase:(a==null?void 0:a.value)||u,tenantKey:(r==null?void 0:r.value)||"",enableReporting:(i==null?void 0:i.checked)??!0};console.log("Saving current settings to storage:",s);try{await chrome.storage.sync.set(s),console.log("Settings saved to sync storage successfully")}catch{try{await chrome.storage.local.set(s),console.log("Settings saved to local storage successfully")}catch(d){console.error("Failed to save settings:",d)}}}catch(e){console.error("Error loading settings:",e),g("Error loading settings",!1)}}function y(){n&&(n.checked=!0),l&&(l.value="20"),a&&(a.value=u),r&&(r.value=""),i&&(i.checked=!0),g("Settings reset to defaults",!0)}function S(){var e,s;if(o)try{o.disabled=!0,o.textContent="Saving...";const c={enabled:(n==null?void 0:n.checked)??!0,minScore:parseInt((l==null?void 0:l.value)??"20"),apiBase:((e=a==null?void 0:a.value)==null?void 0:e.trim())||u,tenantKey:((s=r==null?void 0:r.value)==null?void 0:s.trim())||"",enableReporting:(i==null?void 0:i.checked)??!0};console.log("Saving settings:",c),(async()=>{try{await chrome.storage.sync.set(c),console.log("Settings saved to sync storage successfully"),console.log("About to call setStatus with success message"),g("Settings saved successfully! ✓",!0),console.log("setStatus called for success"),c.enableReporting&&setTimeout(()=>{console.log("Showing restrictions warning"),g("Note: Reporting may not work on Gmail, LinkedIn, and other corporate sites due to security restrictions. Test on regular websites.",!1)},2e3)}catch{console.log("Sync storage failed, trying local storage fallback...");try{await chrome.storage.local.set(c),console.log("Settings saved to local storage successfully"),console.log("About to call setStatus for local storage success"),g("Settings saved to local storage ✓",!0),console.log("setStatus called for local storage success")}catch(f){console.error("Both storage methods failed:",f),g("Error saving settings: "+f,!1)}}o&&(o.disabled=!1,o.textContent="Save")})()}catch(c){console.error("Error in saveSettings:",c),g("Error saving settings: "+c,!1),o&&(o.disabled=!1,o.textContent="Save")}}document.addEventListener("DOMContentLoaded",()=>{console.log("PhishGuard options page loaded");try{n=document.getElementById("enabled"),l=document.getElementById("minScore"),a=document.getElementById("apiBase"),r=document.getElementById("tenantKey"),i=document.getElementById("enableReporting"),o=document.getElementById("save"),t=document.getElementById("status"),console.log("DOM elements found:",{enabledToggle:!!n,minScoreInput:!!l,apiBaseInput:!!a,tenantKeyInput:!!r,reportingToggle:!!i,saveBtn:!!o,statusDiv:!!t}),v(),o?(console.log("Adding click listener to save button"),o.addEventListener("click",d=>{console.log("Save button clicked!",d),S()})):console.error("Save button not found!");const e=document.getElementById("reset");e?(console.log("Adding click listener to reset button"),e.addEventListener("click",d=>{console.log("Reset button clicked!",d),y()})):console.error("Reset button not found!");const s=document.getElementById("testStatus");s?(console.log("Adding click listener to test status button"),s.addEventListener("click",d=>{console.log("Test status button clicked!",d),g("Test status message - this should be visible!",!0)})):console.error("Test status button not found!");const c=document.createElement("div");c.innerHTML=`
      <div style="margin-top: 20px; padding: 15px; background-color: #e7f3ff; border: 1px solid #b3d9ff; border-radius: 5px;">
        <h4>Important Notes:</h4>
        <ul style="margin: 5px 0; padding-left: 20px;">
          <li><strong>Default Settings:</strong> Both detection and reporting are enabled by default</li>
          <li><strong>API URL:</strong> Automatically configured to your custom domain (hidden field)</li>
          <li><strong>Minimum Score:</strong> Set to 20 for optimal phishing detection</li>
          <li><strong>Corporate Sites:</strong> Gmail, LinkedIn, Outlook have security restrictions</li>
          <li><strong>Local Detection:</strong> Basic phishing detection works everywhere</li>
          <li><strong>Cloud Scoring:</strong> Enhanced detection when reporting is enabled</li>
          <li><strong>Best Testing:</strong> Use regular websites or our test pages</li>
        </ul>
      </div>
    `,t&&t.parentNode&&t.parentNode.insertBefore(c,t.nextSibling),console.log("Options page initialized successfully")}catch(e){console.error("Error initializing options page:",e),g("Error initializing options page",!1)}});
